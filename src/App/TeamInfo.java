/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package App;

import Model.FootballPlayer;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Vu Dai Duong
 */
public class TeamInfo extends javax.swing.JFrame {
    DefaultTableModel tableModel;
    private static ArrayList<FootballPlayer> listFootballPlayers;
    
    public static TeamInfo teamInfo = new TeamInfo();
    
    public static TeamSquad teamSquad = new TeamSquad();
    
    public void savePlayerInFile(ArrayList<FootballPlayer> listFootballPlayers) {
        try {
            File file = new File("D:\\Codegym\\Netbean\\Case_Study\\FootballManager\\src\\App\\listPlayer.txt");
            FileWriter fileWriter = new FileWriter(file);
            PrintWriter printWriter = new PrintWriter(fileWriter);
            for(FootballPlayer footballPlayer : listFootballPlayers) {
                printWriter.println(footballPlayer.getName() + "," + footballPlayer.getPosition()
                        + "," + footballPlayer.getIndex()+ "," + footballPlayer.getBirthYear());
            }
            printWriter.close();
        }catch(IOException e) {
            System.out.println(e);
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }
    
    public void readPlayerFromFile(ArrayList<FootballPlayer> listFootballPlayers){
        try {
            File file = new File("D:\\Codegym\\Netbean\\Case_Study\\FootballManager\\src\\App\\listPlayer.txt");
            if (!file.exists()) {
                JOptionPane.showMessageDialog(null, "Danh sách cầu thủ không tồn tại.", "Thông báo", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!file.canRead()) {
                JOptionPane.showMessageDialog(null, "Không thể đọc danh sách cầu thủ.", "Thông báo", JOptionPane.ERROR_MESSAGE);
                return;
            }
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String string = new String();
            while ((string = bufferedReader.readLine()) != null) {
                StringTokenizer stringTokenizer = new StringTokenizer(string, ",");
                String name = stringTokenizer.nextToken();
                String position = stringTokenizer.nextToken();
                int index = Integer.parseInt(stringTokenizer.nextToken());
                int birthYear = Integer.parseInt(stringTokenizer.nextToken());
                listFootballPlayers.add(new FootballPlayer(name, birthYear, index, position));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException | NumberFormatException e) {
            System.out.println(e.getMessage());
        }
    }
  
    public void showList(ArrayList<FootballPlayer> list){
        
        tableModel = (DefaultTableModel) tablePlayer.getModel();
        int i = 1;
        tableModel.setRowCount(0);
        for (FootballPlayer footballPlayer : list) {
            tableModel.addRow(new Object[]{
                i++, footballPlayer.getName(), footballPlayer.getPosition(), footballPlayer.getIndex(), (2020 - footballPlayer.getBirthYear())
            });
        }
        tablePlayer.setModel(tableModel);
        tableModel.fireTableDataChanged();
        tablePlayer.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablePlayer.getColumnModel().getColumn(0).setPreferredWidth(40);
        tablePlayer.getColumnModel().getColumn(1).setPreferredWidth(150);
        tablePlayer.getColumnModel().getColumn(2).setPreferredWidth(80);
        tablePlayer.getColumnModel().getColumn(3).setPreferredWidth(70);
        tablePlayer.getColumnModel().getColumn(4).setPreferredWidth(65);
    }
                           
    public TeamInfo() {
        initComponents();
        this.setTitle("Dream Team Football Club");
        listFootballPlayers = new ArrayList<>();
        readPlayerFromFile(listFootballPlayers);
        showList(listFootballPlayers);
        tablePlayer.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        player = new javax.swing.JScrollPane();
        tablePlayer = new javax.swing.JTable();
        addPlayer = new javax.swing.JButton();
        deletePlayer = new javax.swing.JButton();
        editPlayer = new javax.swing.JButton();
        searchInput = new javax.swing.JTextField();
        findPlayer = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        nameInput = new javax.swing.JTextField();
        teamSquadBtn = new javax.swing.JButton();
        infoTeam = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        positionInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        indexInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        birthYearInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        clearInput = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablePlayer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "STT", "Tên cầu thủ", "Vị trí", "Chỉ số", "Tuổi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablePlayer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePlayerMouseClicked(evt);
            }
        });
        player.setViewportView(tablePlayer);

        addPlayer.setText("Tuyển mới cầu thủ");
        addPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerActionPerformed(evt);
            }
        });

        deletePlayer.setText("Sa thải cầu thủ");
        deletePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlayerActionPerformed(evt);
            }
        });

        editPlayer.setText("Chỉnh sửa thông tin ");
        editPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlayerActionPerformed(evt);
            }
        });

        searchInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchInputKeyTyped(evt);
            }
        });

        findPlayer.setText("Tìm kiếm ");
        findPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPlayerActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        teamSquadBtn.setText("CHỈNH SỬA ĐỘI HÌNH");
        teamSquadBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                teamSquadBtnMouseClicked(evt);
            }
        });

        infoTeam.setText("THÔNG TIN ĐỘI BÓNG");
        infoTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoTeamActionPerformed(evt);
            }
        });

        jLabel1.setText("Họ và tên");

        jLabel2.setText("Vị trí");

        jLabel3.setText("Chỉ số");

        jLabel4.setText("Năm sinh");

        jLabel5.setText("@author Vu Dai Duong");

        jLabel6.setText("ỨNG DỤNG QUẢN LÝ ĐỘI BÓNG");

        clearInput.setText("Xóa nhập");
        clearInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamSquadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoTeam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(player, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2))
                                    .addGap(42, 42, 42)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(indexInput, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(positionInput, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(birthYearInput, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                        .addComponent(nameInput)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(addPlayer)
                                    .addGap(18, 18, 18)
                                    .addComponent(editPlayer)))
                            .addComponent(clearInput))
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(findPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(deletePlayer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(positionInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(indexInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(birthYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(addPlayer)
                                            .addComponent(editPlayer))
                                        .addGap(18, 18, 18)
                                        .addComponent(clearInput))
                                    .addComponent(player, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(deletePlayer)
                                    .addComponent(exit)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(infoTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(teamSquadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    int indexOfRow;
    private void tablePlayerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePlayerMouseClicked
        indexOfRow = tablePlayer.getSelectedRow();
        if (listFootballPlayers.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Danh sách cầu thủ trống.", "Thông báo", JOptionPane.ERROR_MESSAGE);
        } else if (indexOfRow == -1){
            JOptionPane.showMessageDialog(null, "Chọn cầu thủ", "Thông báo", JOptionPane.ERROR_MESSAGE);
        } else {
            nameInput.setText(listFootballPlayers.get(indexOfRow).getName());
            positionInput.setText(listFootballPlayers.get(indexOfRow).getPosition());
            indexInput.setText(Integer.toString(listFootballPlayers.get(indexOfRow).getIndex()));
            birthYearInput.setText(Integer.toString(2020 - listFootballPlayers.get(indexOfRow).getBirthYear()));
        }
    }//GEN-LAST:event_tablePlayerMouseClicked

    private void addPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerActionPerformed
       if(JOptionPane.showConfirmDialog(null, "Bạn chắc chắn muốn tuyển cầu thủ này?","Xác nhận",JOptionPane.DEFAULT_OPTION)==0){
            JOptionPane.showMessageDialog(rootPane, "Tuyển cầu thủ thành công.");
            FootballPlayer footballPlayer = new FootballPlayer();
            footballPlayer.setName(nameInput.getText());
            footballPlayer.setPosition(positionInput.getText());
            footballPlayer.setIndex(Integer.parseInt(indexInput.getText()));
            footballPlayer.setBirthYear(Integer.parseInt(birthYearInput.getText()));
            listFootballPlayers.add(footballPlayer);
            savePlayerInFile(listFootballPlayers);
            showList(listFootballPlayers);
            clearData();
       }
    }//GEN-LAST:event_addPlayerActionPerformed

    int removeIndex;
    private void deletePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlayerActionPerformed
        removeIndex = tablePlayer.getSelectedRow();
        if (listFootballPlayers.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Danh sách cầu thủ trống.", "Thông báo", JOptionPane.ERROR_MESSAGE);
        } else {
            if (removeIndex == -1) {
                JOptionPane.showMessageDialog(null, "Hãy chọn 1 cầu thủ để thực hiện.", "Thông báo", JOptionPane.ERROR_MESSAGE);
            } else {
                if(JOptionPane.showConfirmDialog(null, "Bạn chắc chắn muốn sa thải?","Xác nhận",JOptionPane.DEFAULT_OPTION)==0){
                    JOptionPane.showMessageDialog(rootPane, "Đã sa thải.");
                    listFootballPlayers.remove(removeIndex);
                    showList(listFootballPlayers);
                }
            }
        }
        savePlayerInFile(listFootballPlayers);
    }//GEN-LAST:event_deletePlayerActionPerformed

    private void editPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlayerActionPerformed
        String fullname;
        int birthYear;
        int index;
        String position;
        fullname = nameInput.getText();
        position = positionInput.getText();
        index = Integer.parseInt(indexInput.getText());
        birthYear = 2020 - Integer.parseInt(birthYearInput.getText());
        FootballPlayer footballPlayer = new FootballPlayer(fullname,birthYear, index,position);
       if(JOptionPane.showConfirmDialog(null, "Bạn chắc chắn muốn chỉnh sửa thông tin?","Xác nhận",JOptionPane.DEFAULT_OPTION)==0){
            JOptionPane.showMessageDialog(rootPane, "Chỉnh sửa thành công.");
            listFootballPlayers.set(indexOfRow, footballPlayer);
            savePlayerInFile(listFootballPlayers);
            showList(listFootballPlayers);
       };
    }//GEN-LAST:event_editPlayerActionPerformed

    private void clearData() {
        nameInput.setText("");
        positionInput.setText("");
        indexInput.setText("");
        birthYearInput.setText("");
    }
    private void clearInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInputActionPerformed
        clearData();
    }//GEN-LAST:event_clearInputActionPerformed

    private void findPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPlayerActionPerformed
        tableModel = (DefaultTableModel) tablePlayer.getModel();
        String search = searchInput.getText();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(tableModel);
        tablePlayer.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_findPlayerActionPerformed

    private void searchInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchInputKeyTyped
        tableModel = (DefaultTableModel) tablePlayer.getModel();
        String search = searchInput.getText();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(tableModel);
        tablePlayer.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_searchInputKeyTyped

    private void infoTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoTeamActionPerformed
        JOptionPane.showMessageDialog(null, "Bạn đang ở trang Thông tin đội bóng");
    }//GEN-LAST:event_infoTeamActionPerformed

    private void teamSquadBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teamSquadBtnMouseClicked
        teamInfo.setVisible(false);
        teamSquad.setVisible(true);
    }//GEN-LAST:event_teamSquadBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeamInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeamInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeamInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeamInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeamInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPlayer;
    private javax.swing.JTextField birthYearInput;
    private javax.swing.JButton clearInput;
    private javax.swing.JButton deletePlayer;
    private javax.swing.JButton editPlayer;
    private javax.swing.JButton exit;
    private javax.swing.JButton findPlayer;
    private javax.swing.JTextField indexInput;
    private javax.swing.JButton infoTeam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField nameInput;
    private javax.swing.JScrollPane player;
    private javax.swing.JTextField positionInput;
    private javax.swing.JTextField searchInput;
    private javax.swing.JTable tablePlayer;
    private javax.swing.JButton teamSquadBtn;
    // End of variables declaration//GEN-END:variables
}
